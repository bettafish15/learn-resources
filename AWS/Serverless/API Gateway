AWS API Gateway:
	+ AWS Lambda + API Gateway: No infra to managed
	+ Support for the WebSocket Protocol	
	+ Handle API versioning (v1, v2...)
	+ Handle different environments (dev, test, prod...)
	+ Handle security (Authentication and Authorization)
	+ Create API keys, handle request throttling
	+ Swagger / Open API import to quickly define APIs
	+ Transform and validate req/res
	+ Gen SDK and API specs
	+ Cache API res

API Gateway - Integrations High Level
	+ Lambda Func:
		- Invoke Lambda func
		- Easy way to expose RES API backed by AWS Lambda

	+ Http:
		- Expose HTTP endpoints in the backend
		- Example: internal HTTP API on prem, ALB...
		=> rate limiting, caching, user authens, api keys, etc...

	+ AWS Service:
		- Expose any AWS API through API Gateway ?
		- Ex: start an AWS Step Func workflow, post a message to SQS
		=> add auth, deploy publicly, rate control...

API Gateway - Endpoint Types:
	+ Edge-Optimized (default): For global clients
		- Request are routed through CloudFront Edge locations (improve latency)
		- API Gateway still lives in only one region

	+ Regional:
		- For clients within same region
		- Could manually combine with Cloudfront (more control over caching strategies and distribution)

	+ Private:
		- Can only be accessed from your VPC using an interface VPC endpoint (ENI)
		- Use a resource policy to define access

API Gateway - Security:
	+ User Authentication through:
		- IAM Roles (useful for internal apps)
		- Cognito (identity for external users - example mobile users)
		- Custom Authorizer (own logic)

	+ Custom Domain Name HTTPS security through integraion with AWS Certificate Manager (ACM)
		- If using Edge-Optimized endpoint, the the cert must be in us-east-1
		- If using Regional endpoint, cert must be in API Gateway region
		- Must setup CNAME or A-alias record in Route 53